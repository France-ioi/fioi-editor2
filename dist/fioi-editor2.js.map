{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/cssify/browser.js","src/directives/buffer.jade","src/directives/buffer.js","src/directives/editor.jade","src/directives/editor.js","src/main.css","src/main.js","src/services/buffers.js","src/services/tabs.js","src/services/tabsets.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnGA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fioi-editor2.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = function (css, customDocument) {\n  var doc = customDocument || document;\n  if (doc.createStyleSheet) {\n    var sheet = doc.createStyleSheet()\n    sheet.cssText = css;\n    return sheet.ownerNode;\n  } else {\n    var head = doc.getElementsByTagName('head')[0],\n        style = doc.createElement('style');\n\n    style.type = 'text/css';\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(doc.createTextNode(css));\n    }\n\n    head.appendChild(style);\n    return style;\n  }\n};\n\nmodule.exports.byUrl = function(url) {\n  if (document.createStyleSheet) {\n    return document.createStyleSheet(url).ownerNode;\n  } else {\n    var head = document.getElementsByTagName('head')[0],\n        link = document.createElement('link');\n\n    link.rel = 'stylesheet';\n    link.href = url;\n\n    head.appendChild(link);\n    return link;\n  }\n};\n","module.exports = \"<div><div ui-ace=\\\"{onLoad: vm.aceLoaded, mode: \\'c_cpp\\'}\\\"></div><div><span>Language du fichier :</span><select ng-model=\\\"vm.language\\\" ng-options=\\\"option.name for option in vm.languageOptions track by option.name\\\" ng-change=\\\"vm.setLanguage(option)\\\"></select></div></div>\";\n","'use strict';\nmodule.exports = function (m) {\n\nm.directive('fioiEditor2Buffer', bufferDirective);\nfunction bufferDirective () {\n   return {\n      restrict: 'E',\n      scope: {\n         buffer: '@',\n         onInit: '&'\n      },\n      template: require('./buffer.jade'),\n      controllerAs: 'vm',\n      bindToController: true,\n      require: '^fioiEditor2',\n      replace: true,\n      controller: BufferController,\n      link: function (scope, iElement, iAttrs, editorController) {\n         scope.$on('$destroy', function () {\n            scope.vm.cleanup();\n         });\n      }\n   };\n}\n\nBufferController.$inject = ['$rootScope', 'FioiEditor2Buffers'];\nfunction BufferController ($rootScope, buffers) {\n\n   var controller = this;\n   var buffer = buffers.get(this.buffer);\n   var editor = null; // the ACE object\n\n   // Load from service and hook up events.\n   onBufferChanged();\n   var eventMap = {\n      changed: onBufferChanged\n   };\n   var unhookers = _.map(eventMap, function (func, name) {\n      return $rootScope.$on('fioi-editor2_buffer-'+buffer.name+'_'+name, func);\n   });\n   this.cleanup = function () {\n      _.each(unhookers, function (func) { func(); });\n      buffer.update({\n         text: editor.getValue(),\n         language: this.language && this.language.name,\n         selection: editor.selection.getRange()\n      });\n   }.bind(this);\n\n   this.aceLoaded = function (editor_) {\n      window.editor = editor_;\n      editor = editor_;\n      editor.setValue(buffer.text);\n      editor.selection.setRange(buffer.selection);\n      editor.focus();\n   };\n\n   function onBufferChanged () {\n      controller.languageOptions = buffer.getLanguages();\n      controller.language = _.find(controller.languageOptions,\n         function (language) { return language.name == buffer.language; });\n      controller.text = buffer.text;\n   }\n\n}\n\n};","module.exports = \"<div class=\\\"fioi-editor2\\\"><ul class=\\\"fioi-editor2_tabs\\\"><li ng-click=\\\"vm.addTab()\\\" class=\\\"fioi-editor2_new-tab\\\">+</li><li ng-repeat=\\\"tab in vm.tabs track by tab.name\\\" ng-class=\\\"{\\'active\\':tab===vm.tab}\\\" ng-click=\\\"vm.selectTab(tab)\\\" class=\\\"fioi-editor2_tab\\\"><span class=\\\"fioi-editor2_tab-title\\\">{{tab.title}}</span><span ng-click=\\\"vm.closeTab(tab)\\\" class=\\\"fioi-editor2_close-tab\\\">×</span></li></ul><div class=\\\"fioi-editor2_buffers\\\"><div ng-repeat=\\\"buffer in vm.tab.buffers track by buffer\\\"><fioi-editor2-buffer buffer=\\\"{{::buffer}}\\\"></fioi-editor2-buffer></div></div></div>\";\n","'use strict';\nmodule.exports = function (m) {\n\n/**\nThis directive inserts the editor component.\n\nEach instance of the editor component is bound to a named group in the\nstorage service.\n\nThe user can select one of the tabs maintained by the storage service,\nadd a new tab, remove a tab, and rename a tab.\n\nWhen a tab is selected, the editor uses a buffer directive to display the\nsequence of buffers held in the tab side-by-side.\n\nThe directive supplies its API object to the parent controller in a variable\nnamed 'api' when evaluating the directive's on-init attribute.\n\nThe API includes function to:\n- start and stop the recording mode\n- retrieve the last recorded sequence of timestamped events\n- …\n\n*/\nm.directive('fioiEditor2', editorDirective);\nfunction editorDirective () {\n   return {\n      restrict: 'A',\n      scope: {\n         fioiEditor2: '&'\n      },\n      template: require('./editor.jade'),\n      controllerAs: 'vm',\n      bindToController: true,\n      replace: true,\n      controller: EditorController,\n      link: function (scope, iElement, iAttrs, controller) {\n         scope.$on('$destroy', function () {\n            scope.vm.cleanup();\n         });\n      }\n   };\n}\n\nEditorController.$inject = ['$rootScope', 'FioiEditor2Tabsets']\nfunction EditorController ($rootScope, tabsets) {\n\n   var config = this.fioiEditor2();\n   var tabset = tabsets.get(config.tabset);\n   var controller = this;\n\n   var api = {};\n   api.placeholder = function () {\n      alert('placeholder');\n   };\n   api.trigger = function (event) {\n      if (event === 'tabs-changed')\n         return load();\n   };\n\n   this.addTab = function () {\n      var tab = tabset.addTab();\n      tab.addBuffer('');  // XXX this should be done by the tab based on its mode\n      this.selectTab(tab);\n   }.bind(this);\n\n   this.closeTab = function (tab) {\n      tabset.removeTab(tab.name);\n   };\n\n   this.selectTab = function (tab) {\n      tabset.setActiveTab(tab.name);\n   };\n\n   // Initialize controller data and reload it on 'changed' event.\n   onTabsetChanged();\n   var unhookers = [\n      $rootScope.$on('fioi-editor2_tabset-'+config.tabset+'_changed', onTabsetChanged)\n   ];\n   this.cleanup = function () {\n      _.each(unhookers, function (func) { func(); });\n   };\n\n   // Pass the editor component's API to the enclosing controller.\n   if (typeof this.onInit === 'function')\n      this.onInit({api: api});\n\n   //\n   // Private function\n   //\n\n   // Load state from the tabs service.\n   function onTabsetChanged () {\n      controller.tabs = tabset.getTabs();\n      controller.tab = tabset.getActiveTab();\n   }\n\n}\n\n};","var css = \".fioi-editor2 {\\n   width: 762px;\\n}\\n\\nul.fioi-editor2_tabs {\\n   font: bold 11px Verdana, Arial, sans-serif;\\n   list-style-type: none;\\n   padding-bottom: 24px;\\n   border-bottom: 1px solid #CCCCCC;\\n   margin: 0;\\n}\\n\\nul.fioi-editor2_tabs > li {\\n   float: left;\\n   height: 21px;\\n   line-height: 21px;\\n   padding: 0 7px;\\n   background-color: #E0F3DB;\\n   margin: 2px 2px 0 2px;\\n   border: 1px solid #CCCCCC;\\n   cursor: pointer;\\n}\\n\\nul.fioi-editor2_tabs > li.active {\\n   border-bottom: 1px solid #fff;\\n   background-color: #FFFFFF;\\n}\\n\\nul.fioi-editor2_tabs > li:hover .fioi-editor2_tab-title {\\n   text-decoration: underline;\\n}\\n\\n.fioi-editor2_close-tab {\\n   padding: 0px 2px;\\n   margin-left: 2px;\\n   border-radius: 3px;\\n}\\n\\n.fioi-editor2_close-tab:hover {\\n   background-color: #D8D8D8;\\n}\\n\\n.fioi-editor2_buffers {\\n   width: 100%;\\n}\\n\\n.fioi-editor2_buffers textarea {\\n   width: 756px;\\n   height: auto;\\n   text-align: left;\\n   border: 1px solid #CCCCCC;\\n   border-top: none;\\n}\\n\\n.fioi-editor2_buffers .ace_editor {\\n   width: 760px;\\n   height: 350px; /* 14px * 25 lines */\\n   border: 1px solid #CCCCCC;\\n   border-top: none;\\n}\\n\\n/*\\n#sourcesEditor {\\n   width:762px;\\n}\\n\\n#testsEditor {\\n   width:762px;\\n}\\n\\n.CodeMirror {\\n  text-align: left;\\n  border: 1px solid #CCCCCC;\\n  border-top: none;\\n}\\n\\n.CodeMirror.basic {\\n  border-top: 1px solid #CCCCCC;\\n}\\n\\n.tooltip {\\n   display:none;\\n}\\n*/\"; (require(\"./../node_modules/cssify\"))(css); module.exports = css;","'use strict';\ndefine(['angular', 'lodash', 'angular-ui-ace'], function (angular, _) {\n\nrequire('./main.css');\n\nvar m = angular.module('fioi-editor2', ['ui.ace']);\nrequire('./services/tabsets')(m);\nrequire('./services/tabs')(m);\nrequire('./services/buffers')(m);\nrequire('./directives/editor')(m);\nrequire('./directives/buffer')(m);\n\n});","'use strict';\nmodule.exports = function (m) {\n\n/**\nThis service maintains a set of named buffers.\n*/\nm.factory('FioiEditor2Buffers', BuffersFactory);\nBuffersFactory.$inject = ['$rootScope'];\nfunction BuffersFactory ($rootScope) {\n\n   var service = {};\n   var buffers = {};\n   var nextId = 1;\n\n   function Buffer (name, text, options) {\n      this.options = options || {};\n      this.name = name;\n      this.text = (text || \"\").toString();\n      this.selection = {start: {row: 0, column: 0}, end: {row: 0, column: 0}};\n      this.language = this.options.language || 'text';\n   }\n   Buffer.prototype.update = function (attrs) {\n      if ('text' in attrs)\n         this.text = attrs.text;\n      if ('language' in attrs)\n         this.language = attrs.language;\n      if ('selection' in attrs)\n         this.selection = _.clone(attrs.selection);\n      this._emit('changed');\n   };\n   Buffer.prototype.getLanguages = function () {\n      if (this.options.languages)\n         return this.options.languages;\n      return this.tab.getLanguages();\n   };\n   Buffer.prototype._emit = function (name) {\n      $rootScope.$emit('fioi-editor2_buffer-'+this.name+'_'+name);\n   };\n\n   service.add = function (text, options) {\n      var name = 'b' + nextId;\n      nextId += 1;\n      var buffer = buffers[name] = new Buffer(name, text, options);\n      return buffer;\n   };\n\n   service.remove = function (name) {\n      var buffer = buffers[name];\n      if (buffer) {\n         delete buffers[name];\n      }\n   };\n\n   service.get = function (name) {\n      return buffers[name];\n   };\n\n   return service;\n}\n\n};","'use strict';\nmodule.exports = function (m) {\n\n/**\nThis service acts as storage for sets of named tabs, where each\ntab holds a sequence of 1 or 2 text buffers.\n\nThe service can dump/load its state to/from a JSON object.\n\n*/\nm.factory('FioiEditor2Tabs', TabsServiceFactory);\nTabsServiceFactory.$inject = ['$rootScope', 'FioiEditor2Buffers'];\nfunction TabsServiceFactory ($rootScope, buffers) {\n\n   var service = {};\n   var tabs = {};\n   var nextId = 1;\n\n   function Tab (name, options) {\n      this.name = name;\n      this.options = options || {};\n      this.title = this.options.title || \"Tab\";\n      this.buffers = [];\n   }\n   Tab.prototype.addBuffer = function (text, options) {\n      options = _.clone(options) || {};\n      if (!('language' in options))\n         options.language = this.options.language;\n      var buffer = buffers.add(text, options);\n      this.buffers.push(buffer.name);\n      buffer.tab = this;\n      return buffer;\n   };\n   Tab.prototype.getLanguages = function () {\n      if (this.options.languages)\n         return this.options.languages;\n      return this.tabset.getLanguages();\n   };\n   Tab.prototype._emit = function (name) {\n      $rootScope.$emit('fioi-editor2_tab-'+this.name+'_'+name);\n   };\n\n   service.add = function (options) {\n      var name = 'b' + nextId;\n      nextId += 1;\n      var tab = tabs[name] = new Tab(name, options);\n      return tab;\n   };\n\n   service.remove = function (name) {\n      var tab = tabs[name];\n      delete tabs[name];\n   };\n\n   service.get = function (name) {\n      return tabs[name];\n   };\n\n   return service;\n}\n\n};","'use strict';\nmodule.exports = function (m) {\n\n/**\nThis service stores named tabsets.\n*/\nm.factory('FioiEditor2Tabsets', TabsetsServiceFactory);\nTabsetsServiceFactory.$inject = ['$rootScope', 'FioiEditor2Tabs'];\nfunction TabsetsServiceFactory ($rootScope, tabs) {\n\n   var service = {};\n   var tabsets = {};\n\n   service.add = function (name, options) {\n      if (name in tabsets)\n         return null;\n      name = name.toString();\n      options.mode = options.mode || 'sources';\n      options.titlePrefix = (options.titlePrefix || 'Tab').toString();\n      var tabset = tabsets[name] = new Tabset(name, options);\n      return tabset;\n   };\n\n   service.get = function (name) {\n      return tabsets[name];\n   };\n\n   service.dump = function () {\n      return _.map(tabsets, function (tabset) { return tabset.dump(); });\n   };\n\n   function Tabset (name, options) {\n      this.name = name;\n      this.options = options;\n      this.tabs = {};\n      this.tabNames = [];\n      this.activeTabName = null;\n   }\n   Tabset.prototype.addTab = function (options) {\n      options = _.clone(options) || {};\n      var name = this._unusedTabTitle();\n      if (!('title' in options))\n         options.title = this._unusedTabTitle();\n      var tab = tabs.add(options);\n      tab.tabset = this;\n      var name = tab.name;\n      this.tabs[name] = tab;\n      this.tabNames.push(name);\n      if (this.activeTabName == null)\n         this.activeTabName = name;\n      this._emit('changed');\n      return tab;\n   };\n   Tabset.prototype.removeTab = function (name) {\n      _.pull(this.tabNames, name);\n      delete this.tabs[name];\n      this._emit('changed');\n   };\n   Tabset.prototype.dump = function () {\n      return {\n         tabs: _.map(this.tabs, function (tab) { return tab.dump(); })\n      };\n   };\n   Tabset.prototype.getTabs = function () {\n      var tabs = this.tabs;\n      return _.map(this.tabNames, function (name) { return tabs[name]; });\n   };\n   Tabset.prototype.setActiveTab = function (name) {\n      if (name in this.tabs) {\n         this.activeTabName = name;\n         this._emit('changed');\n      }\n   };\n   Tabset.prototype.getActiveTab = function () {\n      return this.activeTabName && this.tabs[this.activeTabName];\n   };\n   Tabset.prototype.getLanguages = function () {\n      if (this.options.languages)\n         return this.options.languages;\n      return [{name: \"Text\", ext: 'txt'}];\n   };\n   Tabset.prototype._emit = function (name) {\n      $rootScope.$emit('fioi-editor2_tabset-'+this.name+'_'+name);\n   };\n   Tabset.prototype._unusedTabTitle = function () {\n      var num = 1;\n      var titles = {};\n      _.each(this.tabs, function (tab, name) { titles[tab.title] = true; });\n      while (true) {\n         var newTitle = this.options.titlePrefix + num;\n         if (!(newTitle in titles))\n            return newTitle;\n         num += 1;\n      }\n   }\n\n   return service;\n}\n\n};"]}
